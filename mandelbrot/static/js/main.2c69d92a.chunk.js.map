{"version":3,"sources":["../external \"Cesium\"","provider/testImageryProvider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cesium","gpu","GPU","defaultColor","Color","defaultGlowColor","defaultBackgroundColor","mainKernel","createKernel","minX","maxX","minY","maxY","iterations","cx","this","thread","x","constants","width","cy","y","height","xx","yy","xy","i","color","c","Math","log","argumentTypes","output","graphical","testImageryProvider","options","defaultValue","EMPTY_OBJECT","_tilingScheme","defined","tilingScheme","GeographicTilingScheme","ellipsoid","_cells","cells","_color","_glowColor","glowColor","_glowWidth","glowWidth","_backgroundColor","backgroundColor","_errorEvent","Event","_tileWidth","tileWidth","_tileHeight","tileHeight","_canvasSize","canvasSize","_readyPromise","when","resolve","defineProperties","prototype","proxy","get","maximumLevel","minimumLevel","rectangle","tileDiscardPolicy","errorEvent","ready","readyPromise","credit","hasAlphaChannel","getTileCredits","level","requestImage","request","plane","tileXYToRectangle","west","east","south","north","getCanvas","pickFeatures","longitude","latitude","App","react_default","a","createElement","resium_es","animation","baseLayerPicker","timeline","navigationHelpButton","imageryProvider","creditContainer","creditViewport","skyBox","terrainProvider","skyAtmosphere","homeButton","geocoder","sceneMode","SceneMode","SCENE2D","sceneModePicker","full","sun","undefined","fillHighlightColor","enableLighting","baseColor","atmosphereHueShift","atmosphereSaturationShift","atmosphereBrightnessShift","lightingFadeOutDistance","showGroundAtmosphere","Boolean","window","location","hostname","match","Ion","defaultAccessToken","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c69d92a.chunk.js","sourcesContent":["module.exports = Cesium;","import {Event,define, defaultValue, defineProperties, Color, defined, when, GeographicTilingScheme} from 'cesium';\nimport GPU from 'gpu.js';\n\nconst gpu = new GPU();\nvar defaultColor = new Color(1.0, 1.0, 1.0, 0.4);\nvar defaultGlowColor = new Color(0.0, 1.0, 0.0, 0.05);\nvar defaultBackgroundColor = new Color(0.0, 0.5, 0.0, 0.2);\n\nconst width = 256.0;\nconst height = 256.0;\n\nconst mainKernel=gpu.createKernel(function(minX,maxX,minY,maxY, iterations){\n\tconst cx=minX+(maxX-minX)*this.thread.x/(this.constants.width-1);\n\tconst cy=minY+(maxY-minY)*this.thread.y/(this.constants.height-1);\n\n    let x=0.0;\n    let y=0.0;\n    let xx=0;\n    let yy=0;\n    let xy=0;\n\tlet i=iterations;\n\n\twhile(xx+yy<=4){\n\t\txy=x*y;\n\t\txx=x*x;\n\t\tyy=y*y;\n\t\tx=xx-yy+cx;\n\t\ty=xy+xy+cy;\n\t\ti--;\n    \t\tif(i===0){break;}\n  \t}\n\n\n\tif(i===0){\n\t\tthis.color(1,1,1,0);\n\t}else{\n        i=iterations-i;\n\t\tconst c=3*Math.log(i)/Math.log(iterations-1.0);\n\t\tif(c<1){\n\t\t\tthis.color(0,0,1*c,1);\n\t\t}else if(c<2){\n\t\t\tthis.color(0,1*(c-1),1,1);\n\t\t}else{\n\t\t\tthis.color(1*(c-2),1,1,1);\n        }\n\t}\n},{\n\tconstants:{\n\t\twidth:width,\n\t\theight:height\n    },\n    argumentTypes: { minX: 'Float', maxX: 'Float', minY: 'Float', maxY: 'Float'},\n\toutput:[width,height],\n\tgraphical:true\n});\n\nfunction testImageryProvider(options) {\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n    this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new GeographicTilingScheme({ ellipsoid : options.ellipsoid });\n    this._cells = defaultValue(options.cells, 8);\n    this._color = defaultValue(options.color, defaultColor);\n    this._glowColor = defaultValue(options.glowColor, defaultGlowColor);\n    this._glowWidth = defaultValue(options.glowWidth, 6);\n    this._backgroundColor = defaultValue(options.backgroundColor, defaultBackgroundColor);\n    this._errorEvent = new Event();\n\n    this._tileWidth = defaultValue(options.tileWidth, 256);\n    this._tileHeight = defaultValue(options.tileHeight, 256);\n\n    // A little larger than tile size so lines are sharper\n    // Note: can't be too much difference otherwise texture blowout\n    this._canvasSize = defaultValue(options.canvasSize, 256);\n\n    \n    this._readyPromise = when.resolve(true);\n}\n\ndefineProperties(testImageryProvider.prototype, {\n    /**\n     * Gets the proxy used by this provider.\n     * @memberof testImageryProvider.prototype\n     * @type {Proxy}\n     * @readonly\n     */\n    proxy : {\n        get : function() {\n            return undefined;\n        }\n    },\n\n    /**\n     * Gets the width of each tile, in pixels. This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Number}\n     * @readonly\n     */\n    tileWidth : {\n        get : function() {\n            return this._tileWidth;\n        }\n    },\n\n    /**\n     * Gets the height of each tile, in pixels.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Number}\n     * @readonly\n     */\n    tileHeight : {\n        get : function() {\n            return this._tileHeight;\n        }\n    },\n\n    /**\n     * Gets the maximum level-of-detail that can be requested.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Number}\n     * @readonly\n     */\n    maximumLevel : {\n        get : function() {\n            return undefined;\n        }\n    },\n\n    /**\n     * Gets the minimum level-of-detail that can be requested.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Number}\n     * @readonly\n     */\n    minimumLevel : {\n        get : function() {\n            return undefined;\n        }\n    },\n\n    /**\n     * Gets the tiling scheme used by this provider.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {TilingScheme}\n     * @readonly\n     */\n    tilingScheme : {\n        get : function() {\n            return this._tilingScheme;\n        }\n    },\n\n    /**\n     * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Rectangle}\n     * @readonly\n     */\n    rectangle : {\n        get : function() {\n            return this._tilingScheme.rectangle;\n        }\n    },\n\n    /**\n     * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n     * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n     * returns undefined, no tiles are filtered.  This function should\n     * not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {TileDiscardPolicy}\n     * @readonly\n     */\n    tileDiscardPolicy : {\n        get : function() {\n            return undefined;\n        }\n    },\n\n    /**\n     * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n     * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n     * are passed an instance of {@link TileProviderError}.\n     * @memberof testImageryProvider.prototype\n     * @type {Event}\n     * @readonly\n     */\n    errorEvent : {\n        get : function() {\n            return this._errorEvent;\n        }\n    },\n\n    /**\n     * Gets a value indicating whether or not the provider is ready for use.\n     * @memberof testImageryProvider.prototype\n     * @type {Boolean}\n     * @readonly\n     */\n    ready : {\n        get : function() {\n            return true;\n        }\n    },\n\n    /**\n     * Gets a promise that resolves to true when the provider is ready for use.\n     * @memberof testImageryProvider.prototype\n     * @type {Promise.<Boolean>}\n     * @readonly\n     */\n    readyPromise : {\n        get : function() {\n            return this._readyPromise;\n        }\n    },\n\n    /**\n     * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n     * the source of the imagery.  This function should not be called before {@link testImageryProvider#ready} returns true.\n     * @memberof testImageryProvider.prototype\n     * @type {Credit}\n     * @readonly\n     */\n    credit : {\n        get : function() {\n            return undefined;\n        }\n    },\n\n    /**\n     * Gets a value indicating whether or not the images provided by this imagery provider\n     * include an alpha channel.  If this property is false, an alpha channel, if present, will\n     * be ignored.  If this property is true, any images without an alpha channel will be treated\n     * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n     * and texture upload time are reduced.\n     * @memberof testImageryProvider.prototype\n     * @type {Boolean}\n     * @readonly\n     */\n    hasAlphaChannel : {\n        get : function() {\n            return true;\n        }\n    }\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\ntestImageryProvider.prototype.getTileCredits = function(x, y, level) {\n    return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link testImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<Image|Canvas>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request\n *          should be retried later.  The resolved image may be either an\n *          Image or a Canvas DOM object.\n */\ntestImageryProvider.prototype.requestImage = function(x, y, level, request) {\n    var plane = this._tilingScheme.tileXYToRectangle(x, y, level);\n    mainKernel(plane.west,plane.east,plane.south, plane.north, 1000);\n    return mainKernel.getCanvas();\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *                   It may also be undefined if picking is not supported.\n */\ntestImageryProvider.prototype.pickFeatures = function(x, y, level, longitude, latitude) {\n    return undefined;\n};\n\nexport default testImageryProvider;","import React from 'react';\nimport './App.css';\nimport {Cartesian3, Color, DistanceDisplayCondition, SceneMode} from 'cesium';\nimport {Viewer, Entity, Globe, Scene} from 'resium';\nimport testImageryProvider from './provider/testImageryProvider';\nfunction App() {\n  return (\n    <Viewer \n      animation={false} \n      baseLayerPicker={false}\n      timeline={false}\n      navigationHelpButton={false}\n      imageryProvider={new testImageryProvider()}\n      creditContainer=\"credits\"\n      creditViewport=\"credits\"\n      skyBox={false}\n      terrainProvider={null}\n      skyAtmosphere={false}\n      homeButton={false}\n      geocoder={false}\n      sceneMode={SceneMode.SCENE2D}\n      sceneModePicker={false}\n      full>\n        <Scene \n        sun={undefined} \n        backgroundColor={new Color(0,0,0.303)}\n        />\n\n        <Globe \n        fillHighlightColor={new Color(0, 0, 0)} \n        enableLighting={false} \n        baseColor={new Color(0.3, 0.7,0.9)} \n        atmosphereHueShift={0.1}\n        atmosphereSaturationShift={0}\n        atmosphereBrightnessShift={0}\n        lightingFadeOutDistance={0}\n        showGroundAtmosphere={false}\n        />\n    </Viewer>\n  );\n}\n\n//color spheres:\n//nice green: baseColor={new Color(0.4, 0.7,0.2)} \n//nice blueish: baseColor={new Color(0.4, 0.7,0.7)} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Cesium from \"cesium\";\n\nCesium.Ion.defaultAccessToken = \"\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}